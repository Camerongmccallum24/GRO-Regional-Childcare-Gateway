import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, setDoc, onSnapshot } from 'firebase/firestore';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

// Main App component
function App() {
  // State for Firebase instances and user info
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false); // To track if auth state is determined
  const [loading, setLoading] = useState(true); // Loading state for data
  const [message, setMessage] = useState(''); // User feedback messages

  // State to hold all the workforce planning data
  const [formData, setFormData] = useState({
    serviceContext: {
      serviceDeliveryExpectations: { '2024': '', '2025': '', '2026': '' },
      workforceBudgetFTE: { '2024': '', '2025': '', '2026': '' },
      overallBudgetContext: { '2024': '', '2025': '', '2026': '' },
      operationalContext: { '2024': '', '2025': '', '2026': '' },
      summaryOfPeriodInScope: { '2024': '', '2025': '', '2026': '' },
    },
    serviceCapabilityRequirements: {
      criticalNewSkills: { '2024': '', '2025': '', '2026': '' },
      criticalSkillsGreaterVolume: { '2024': '', '2025': '', '2026': '' },
      skillsNoLongerRequired: { '2024': '', '2025': '', '2026': '' },
    },
    staffDemandSupply: {
      expectedVacancies: { '2024': '', '2025': '', '2026': '' },
      expectedStaffDepartures: { '2024': '', '2025': '', '2026': '' },
      driversBenefitsHiring: { '2024': '', '2025': '', '2026': '' },
      challengesInhibitEmployment: { '2024': '', '2025': '', '2026': '' },
      onboarding: { '2024': '', '2025': '', '2026': '' },
    },
    readinessAssessment: {
      criticalFunctions: { '2024': '', '2025': '', '2026': '' },
      elevatedStaffingRetentionRisks: { '2024': '', '2025': '', '2026': '' },
      addressingStaffingRisk: { '2024': '', '2025': '', '2026': '' },
      resourceManagement: { '2024': '', '2025': '', '2026': '' },
    },
  });

  // Initialize Firebase and handle authentication
  useEffect(() => {
    try {
      // Access global variables provided by the Canvas environment
      const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
      const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
      const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

      // Initialize Firebase app
      const app = initializeApp(firebaseConfig);
      const firestore = getFirestore(app);
      const authService = getAuth(app);

      setDb(firestore);
      setAuth(authService);

      // Sign in with custom token or anonymously
      const signIn = async () => {
        try {
          if (initialAuthToken) {
            await signInWithCustomToken(authService, initialAuthToken);
          } else {
            await signInAnonymously(authService);
          }
        } catch (error) {
          console.error("Firebase authentication error:", error);
          setMessage(`Authentication failed: ${error.message}`);
        }
      };

      signIn();

      // Listen for authentication state changes
      const unsubscribe = onAuthStateChanged(authService, (user) => {
        if (user) {
          setUserId(user.uid);
          setIsAuthReady(true);
          setMessage('Signed in successfully.');
        } else {
          // If user logs out or session expires, userId will be null
          setUserId(null);
          setIsAuthReady(true);
          setMessage('Signed out or anonymous session.');
        }
      });

      // Cleanup subscription on unmount
      return () => unsubscribe();
    } catch (error) {
      console.error("Error initializing Firebase:", error);
      setMessage(`Firebase initialization error: ${error.message}`);
      setLoading(false); // Stop loading if init fails
    }
  }, []); // Run only once on component mount

  // Fetch data from Firestore when auth is ready and userId is available
  useEffect(() => {
    if (db && userId && isAuthReady) {
      const planId = 'my-default-plan'; // Using a fixed plan ID for simplicity
      const docRef = doc(db, `artifacts/${__app_id}/users/${userId}/workforcePlans`, planId);

      // Set up a real-time listener for the document
      const unsubscribe = onSnapshot(docRef, (docSnap) => {
        if (docSnap.exists()) {
          // If document exists, load the data
          const data = docSnap.data();
          // Ensure all nested objects and fields exist, providing defaults if not
          setFormData((prevData) => ({
            ...prevData,
            ...data,
            serviceContext: { ...prevData.serviceContext, ...data.serviceContext },
            serviceCapabilityRequirements: { ...prevData.serviceCapabilityRequirements, ...data.serviceCapabilityRequirements },
            staffDemandSupply: { ...prevData.staffDemandSupply, ...data.staffDemandSupply },
            readinessAssessment: { ...prevData.readinessAssessment, ...data.readinessAssessment },
          }));
          setMessage('Workforce plan loaded successfully!');
        } else {
          // If document doesn't exist, start with default empty form and inform user
          setMessage('No saved plan found. Start a new plan!');
        }
        setLoading(false); // Data loaded or confirmed not existing, stop loading
      }, (error) => {
        console.error("Error fetching document:", error);
        setMessage(`Error loading plan: ${error.message}`);
        setLoading(false);
      });

      // Cleanup listener on unmount or if userId changes
      return () => unsubscribe();
    } else if (isAuthReady && !userId) {
      // If auth is ready but no userId (e.g., anonymous sign-in failed or user logged out),
      // ensure loading state is false and message is set.
      setLoading(false);
      setMessage('Please sign in to save your plan.');
    }
  }, [db, userId, isAuthReady]); // Re-run when db, userId, or auth status changes

  // Handler for input changes
  const handleChange = (section, field, year, value) => {
    setFormData((prevData) => ({
      ...prevData,
      [section]: {
        ...prevData[section],
        [field]: {
          ...prevData[section][field],
          [year]: value,
        },
      },
    }));
  };

  // Function to render a table row for data input
  const renderTableRow = (section, field, label, placeholder) => {
    const years = ['2024', '2025', '2026'];
    return (
      <tr key={field} className="border-b border-gray-200 hover:bg-gray-50">
        <td className="p-3 font-medium text-gray-700 w-1/4">
          {label}
        </td>
        {years.map((year) => (
          <td key={`${field}-${year}`} className="p-3 w-1/4">
            <textarea
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-150 ease-in-out resize-y min-h-[60px]"
              value={formData[section][field][year]}
              onChange={(e) => handleChange(section, field, year, e.target.value)}
              placeholder={placeholder}
              rows="3" // Default rows
            ></textarea>
          </td>
        ))}
      </tr>
    );
  };

  // Helper function to extract budget from string (e.g., "8 FTE, $560,000" -> 560000)
  const extractBudget = (text) => {
    if (!text) return 0;
    const match = text.match(/\$([\d,]+)/); // Matches "$123,456"
    if (match && match[1]) {
      return parseInt(match[1].replace(/,/g, ''), 10); // Remove commas and parse
    }
    return 0; // Default to 0 if no budget found
  };

  // Helper function to extract a number from string (e.g., "2 early childhood teachers" -> 2)
  const extractNumber = (text) => {
    if (!text) return 0;
    const match = text.match(/(\d+)/); // Matches any number
    if (match && match[1]) {
      return parseInt(match[1], 10);
    }
    return 0;
  };

  // Prepare data for charts
  const chartData = ['2024', '2025', '2026'].map(year => ({
    name: year,
    budget: extractBudget(formData.serviceContext.workforceBudgetFTE[year]),
    vacancies: extractNumber(formData.staffDemandSupply.expectedVacancies[year]),
  }));

  // Handle Save button click
  const handleSave = async () => {
    if (!db || !userId) {
      setMessage('Please sign in to save your plan.');
      return;
    }
    setLoading(true);
    setMessage('Saving plan...');
    try {
      const planId = 'my-default-plan'; // Using a fixed plan ID for simplicity
      const docRef = doc(db, `artifacts/${__app_id}/users/${userId}/workforcePlans`, planId);
      await setDoc(docRef, formData);
      setMessage('Workforce plan saved successfully!');
    } catch (error) {
      console.error("Error saving document:", error);
      setMessage(`Error saving plan: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 sm:p-6 font-sans text-gray-800">
      <div className="max-w-6xl mx-auto bg-white shadow-xl rounded-2xl overflow-hidden">
        <header className="bg-gradient-to-r from-blue-600 to-indigo-700 p-6 text-white text-center rounded-t-2xl">
          <h1 className="text-3xl sm:text-4xl font-extrabold mb-2 tracking-tight">
            Workforce Planning Tool
          </h1>
          <p className="text-blue-100 text-lg sm:text-xl">
            Plan your service's staffing needs for the next three years.
          </p>
        </header>

        <main className="p-4 sm:p-8">
          {/* User ID and Message Display */}
          <div className="mb-6 text-center">
            {userId && (
              <p className="text-sm text-gray-500 mb-2">
                User ID: <span className="font-mono text-gray-700 break-all">{userId}</span>
              </p>
            )}
            {loading ? (
              <p className="text-blue-600 font-semibold">Loading...</p>
            ) : (
              <p className={`font-semibold ${message.includes('Error') ? 'text-red-600' : 'text-green-600'}`}>
                {message}
              </p>
            )}
          </div>

          <p className="text-gray-600 mb-8 text-center text-md sm:text-lg leading-relaxed">
            This tool helps you define service context, capability requirements, staff demand & supply, and assess workforce opportunities & risks.
          </p>

          {/* Section 1: Service Context */}
          <section className="mb-10 p-6 bg-blue-50 rounded-xl shadow-md border border-blue-200">
            <h2 className="text-2xl sm:text-3xl font-bold text-blue-800 mb-6 border-b-2 border-blue-300 pb-3">
              STEP ONE: Service Context
            </h2>
            <p className="text-gray-700 mb-6">
              Fill in the current state and projections for the next three years.
            </p>
            <div className="overflow-x-auto">
              <table className="min-w-full bg-white rounded-lg shadow-sm">
                <thead className="bg-blue-100">
                  <tr>
                    <th className="p-3 text-left text-sm font-semibold text-blue-700 uppercase tracking-wider rounded-tl-lg">Category</th>
                    <th className="p-3 text-left text-sm font-semibold text-blue-700 uppercase tracking-wider">2024</th>
                    <th className="p-3 text-left text-sm font-semibold text-blue-700 uppercase tracking-wider">2025</th>
                    <th className="p-3 text-left text-sm font-semibold text-blue-700 uppercase tracking-wider rounded-tr-lg">2026</th>
                  </tr>
                </thead>
                <tbody>
                  {renderTableRow(
                    'serviceContext',
                    'serviceDeliveryExpectations',
                    'Service Delivery Expectations',
                    'e.g. Increase from 60 to 75 children by 2026; maintain 1:11 educator-to-child ratio.'
                  )}
                  {renderTableRow(
                    'serviceContext',
                    'workforceBudgetFTE',
                    'Workforce Budget & FTE',
                    'e.g. 8 FTE, $560,000 (2024); 9 FTE, $630,000 (2025); 10 FTE, $700,000 (2026)'
                  )}
                  {renderTableRow(
                    'serviceContext',
                    'overallBudgetContext',
                    'Overall Budget Context',
                    'e.g. Gradual increase due to government funding for universal 3-year-old kinder program.'
                  )}
                  {renderTableRow(
                    'serviceContext',
                    'operationalContext',
                    'Operational Context',
                    'e.g. Implementing new digital learning tools by 2025.'
                  )}
                  {renderTableRow(
                    'serviceContext',
                    'summaryOfPeriodInScope',
                    'Summary of period in scope',
                    'e.g. Increase in service capacity and staff to meet growing demand.'
                  )}
                </tbody>
              </table>
            </div>
          </section>

          {/* Section 2: Service Capability Requirements */}
          <section className="mb-10 p-6 bg-green-50 rounded-xl shadow-md border border-green-200">
            <h2 className="text-2xl sm:text-3xl font-bold text-green-800 mb-6 border-b-2 border-green-300 pb-3">
              STEP TWO: Service Capability Requirements
            </h2>
            <p className="text-gray-700 mb-6">
              Identify critical new skills needed, skills required in greater volume, and skills no longer required.
            </p>
            <div className="overflow-x-auto">
              <table className="min-w-full bg-white rounded-lg shadow-sm">
                <thead className="bg-green-100">
                  <tr>
                    <th className="p-3 text-left text-sm font-semibold text-green-700 uppercase tracking-wider rounded-tl-lg">Category</th>
                    <th className="p-3 text-left text-sm font-semibold text-green-700 uppercase tracking-wider">2024</th>
                    <th className="p-3 text-left text-sm font-semibold text-green-700 uppercase tracking-wider">2025</th>
                    <th className="p-3 text-left text-sm font-semibold text-green-700 uppercase tracking-wider rounded-tr-lg">2026</th>
                  </tr>
                </thead>
                <tbody>
                  {renderTableRow(
                    'serviceCapabilityRequirements',
                    'criticalNewSkills',
                    'Critical New Skills Required',
                    'e.g. Digital literacy for new learning tools; inclusive education practices.'
                  )}
                  {renderTableRow(
                    'serviceCapabilityRequirements',
                    'criticalSkillsGreaterVolume',
                    'Critical Skills Required in Greater Volume',
                    'e.g. Early childhood teaching qualifications; additional needs support.'
                  )}
                  {renderTableRow(
                    'serviceCapabilityRequirements',
                    'skillsNoLongerRequired',
                    'Skills No Longer or Less Required',
                    'e.g. Administrative tasks due to new management software.'
                  )}
                </tbody>
              </table>
            </div>
          </section>

          {/* Section 3: Staff Demand & Supply */}
          <section className="mb-10 p-6 bg-purple-50 rounded-xl shadow-md border border-purple-200">
            <h2 className="text-2xl sm:text-3xl font-bold text-purple-800 mb-6 border-b-2 border-purple-300 pb-3">
              STEP THREE: Staff Demand & Supply
            </h2>
            <p className="text-gray-700 mb-6">
              Project expected vacancies, staff departures, and outline onboarding processes.
            </p>
            <div className="overflow-x-auto">
              <table className="min-w-full bg-white rounded-lg shadow-sm">
                <thead className="bg-purple-100">
                  <tr>
                    <th className="p-3 text-left text-sm font-semibold text-purple-700 uppercase tracking-wider rounded-tl-lg">Category</th>
                    <th className="p-3 text-left text-sm font-semibold text-purple-700 uppercase tracking-wider">2024</th>
                    <th className="p-3 text-left text-sm font-semibold text-purple-700 uppercase tracking-wider">2025</th>
                    <th className="p-3 text-left text-sm font-semibold text-purple-700 uppercase tracking-wider rounded-tr-lg">2026</th>
                  </tr>
                </thead>
                <tbody>
                  {renderTableRow(
                    'staffDemandSupply',
                    'expectedVacancies',
                    'Expected Vacancies by Role',
                    'e.g. 2 early childhood teachers, 1 room leader by 2025.'
                  )}
                  {renderTableRow(
                    'staffDemandSupply',
                    'expectedStaffDepartures',
                    'Expected Staff Departures',
                    'e.g. 1 retirement, 2 relocations expected over next 3 years.'
                  )}
                  {renderTableRow(
                    'staffDemandSupply',
                    'driversBenefitsHiring',
                    'Drivers/Benefits for Hiring New Staff',
                    'e.g. Professional development opportunities; above-award wages.'
                  )}
                  {renderTableRow(
                    'staffDemandSupply',
                    'challengesInhibitEmployment',
                    'Challenges Inhibiting Potential Staff Employment',
                    'e.g. Competitive job market; rural location.'
                  )}
                  {renderTableRow(
                    'staffDemandSupply',
                    'onboarding',
                    'Onboarding',
                    'e.g. 6-week process; 1 mentor assigned per new staff; $2,000 training cost per staff.'
                  )}
                </tbody>
              </table>
            </div>
          </section>

          {/* Section 4: Readiness Assessment - Workforce Opportunities & Risks */}
          <section className="mb-10 p-6 bg-red-50 rounded-xl shadow-md border border-red-200">
            <h2 className="text-2xl sm:text-3xl font-bold text-red-800 mb-6 border-b-2 border-red-300 pb-3">
              STEP FOUR: Readiness Assessment - Workforce Opportunities & Risks
            </h2>
            <p className="text-gray-700 mb-6">
              Define critical functions, identify retention risks, and list existing controls.
            </p>
            <div className="overflow-x-auto">
              <table className="min-w-full bg-white rounded-lg shadow-sm">
                <thead className="bg-red-100">
                  <tr>
                    <th className="p-3 text-left text-sm font-semibold text-red-700 uppercase tracking-wider rounded-tl-lg">Category</th>
                    <th className="p-3 text-left text-sm font-semibold text-red-700 uppercase tracking-wider">2024</th>
                    <th className="p-3 text-left text-sm font-semibold text-red-700 uppercase tracking-wider">2025</th>
                    <th className="p-3 text-left text-sm font-semibold text-red-700 uppercase tracking-wider rounded-tr-lg">2026</th>
                  </tr>
                </thead>
                <tbody>
                  {renderTableRow(
                    'readinessAssessment',
                    'criticalFunctions',
                    'Critical Functions',
                    'e.g. Early childhood teachers - without sufficient ECTs, we risk non-compliance.'
                  )}
                  {renderTableRow(
                    'readinessAssessment',
                    'elevatedStaffingRetentionRisks',
                    'Elevated Staffing Retention Risks',
                    'e.g. Burnout due to increasing workload; mitigation: implement wellness program.'
                  )}
                  {renderTableRow(
                    'readinessAssessment',
                    'addressingStaffingRisk',
                    'Addressing Staffing Risk',
                    'e.g. Annual satisfaction surveys; exit interviews; flexible working arrangements.'
                  )}
                  {renderTableRow(
                    'readinessAssessment',
                    'resourceManagement',
                    'Resource Management',
                    'e.g. Quarterly review of staff-to-child ratios; use of casual pool for fluctuations.'
                  )}
                </tbody>
              </table>
            </div>
          </section>

          {/* Section 5: Data Visualizations */}
          <section className="mb-10 p-6 bg-yellow-50 rounded-xl shadow-md border border-yellow-200">
            <h2 className="text-2xl sm:text-3xl font-bold text-yellow-800 mb-6 border-b-2 border-yellow-300 pb-3">
              STEP FIVE: Data Visualizations
            </h2>
            <p className="text-gray-700 mb-6">
              Visual overview of your workforce plan data.
            </p>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {/* Workforce Budget Chart */}
              <div className="bg-white p-4 rounded-lg shadow-md">
                <h3 className="text-xl font-semibold text-yellow-700 mb-4 text-center">Workforce Budget by Year</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
                    <XAxis dataKey="name" stroke="#555" />
                    <YAxis stroke="#555" tickFormatter={(value) => `$${value.toLocaleString()}`} />
                    <Tooltip formatter={(value) => `$${value.toLocaleString()}`} />
                    <Legend />
                    <Bar dataKey="budget" name="Budget ($)" fill="#8884d8" radius={[10, 10, 0, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </div>

              {/* Expected Vacancies Chart */}
              <div className="bg-white p-4 rounded-lg shadow-md">
                <h3 className="text-xl font-semibold text-yellow-700 mb-4 text-center">Expected Vacancies by Year</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
                    <XAxis dataKey="name" stroke="#555" />
                    <YAxis stroke="#555" />
                    <Tooltip />
                    <Legend />
                    <Bar dataKey="vacancies" name="Vacancies" fill="#82ca9d" radius={[10, 10, 0, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>
          </section>

          {/* Save Button */}
          <div className="mt-10 text-center">
            <button
              onClick={handleSave}
              className="bg-gradient-to-r from-blue-500 to-indigo-600 text-white font-bold py-3 px-8 rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition duration-300 ease-in-out focus:outline-none focus:ring-4 focus:ring-blue-300 disabled:opacity-50 disabled:cursor-not-allowed"
              disabled={loading || !userId} // Disable button if loading or not authenticated
            >
              {loading ? 'Saving...' : 'Save Workforce Plan'}
            </button>
          </div>
        </main>

        <footer className="bg-gray-800 p-4 text-white text-center text-sm rounded-b-2xl mt-8">
          <p>&copy; 2025 Workforce Planning Tool. All rights reserved.</p>
        </footer>
      </div>
    </div>
  );
}

export default App;
